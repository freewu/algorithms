package main

// 3631. Sort Threats by Severity and Exploitability
// You are given a 2D integer array threats, where each threats[i] = [IDi, sevi​, expi]
//     1. IDi: Unique identifier of the threat.
//     2. sevi: Indicates the severity of the threat.
//     3. expi: Indicates the exploitability of the threat.

// The score of a threat i is defined as: score = 2 × sevi + expi

// Your task is to return threats sorted in descending order of score.

// If multiple threats have the same score, sort them by ascending ID​​​​​​​.

// Example 1:
// Input: threats = [[101,2,3],[102,3,2],[103,3,3]]
// Output: [[103,3,3],[102,3,2],[101,2,3]]
// Explanation:
// Threat	ID	sev	exp	Score = 2 × sev + exp
// threats[0]	101	2	3	2 × 2 + 3 = 7
// threats[1]	102	3	2	2 × 3 + 2 = 8
// threats[2]	103	3	3	2 × 3 + 3 = 9
// Sorted Order: [[103, 3, 3], [102, 3, 2], [101, 2, 3]]

// Example 2:
// Input: threats = [[101,4,1],[103,1,5],[102,1,5]]
// Output: [[101,4,1],[102,1,5],[103,1,5]]
// Explanation:​​​​​​​
// Threat	ID	sev	exp	Score = 2 × sev + exp
// threats[0]	101	4	1	2 × 4 + 1 = 9
// threats[1]	103	1	5	2 × 1 + 5 = 7
// threats[2]	102	1	5	2 × 1 + 5 = 7
// threats[1] and threats[2] have same score, thus sort them by ascending ID.
// Sorted Order: [[101, 4, 1], [102, 1, 5], [103, 1, 5]]

// Constraints:
//     1 <= threats.length <= 10^5
//     threats[i] == [IDi, sevi, expi]
//     1 <= IDi <= 10^6
//     1 <= sevi <= 10^9
//     1 <= expi <= 10^9
//     All IDi are unique

import "fmt"
import "slices"

func sortThreats(threats [][]int) [][]int {
    // 计算分数
    mp := make(map[int]int, len(threats))
    for _, v := range threats {
        mp[v[0]] = 2 * v[1] + v[2] // score = 2 × sevi + expi
    }
    // 排序
    slices.SortFunc(threats, func(a1, a2 []int) int {
        if mp[a1[0]] == mp[a2[0]] { // If multiple threats have the same score, sort them by ascending ID​​​​​​​.
            return a1[0] - a2[0] 
        }
        return mp[a2[0]] - mp[a1[0]] //  sorted in descending order of score.
    })
    return threats
}

func main() {
    // Example 1:
    // Input: threats = [[101,2,3],[102,3,2],[103,3,3]]
    // Output: [[103,3,3],[102,3,2],[101,2,3]]
    // Explanation:
    // Threat	ID	sev	exp	Score = 2 × sev + exp
    // threats[0]	101	2	3	2 × 2 + 3 = 7
    // threats[1]	102	3	2	2 × 3 + 2 = 8
    // threats[2]	103	3	3	2 × 3 + 3 = 9
    // Sorted Order: [[103, 3, 3], [102, 3, 2], [101, 2, 3]]
    fmt.Println(sortThreats([][]int{{101,2,3},{102,3,2},{103,3,3}})) // [[103, 3, 3], [102, 3, 2], [101, 2, 3]]
    // Example 2:
    // Input: threats = [[101,4,1],[103,1,5],[102,1,5]]
    // Output: [[101,4,1],[102,1,5],[103,1,5]]
    // Explanation:​​​​​​​
    // Threat	ID	sev	exp	Score = 2 × sev + exp
    // threats[0]	101	4	1	2 × 4 + 1 = 9
    // threats[1]	103	1	5	2 × 1 + 5 = 7
    // threats[2]	102	1	5	2 × 1 + 5 = 7
    // threats[1] and threats[2] have same score, thus sort them by ascending ID.
    // Sorted Order: [[101, 4, 1], [102, 1, 5], [103, 1, 5]]
    fmt.Println(sortThreats([][]int{{101,4,1},{103,1,5},{102,1,5}})) // [[101, 4, 1], [102, 1, 5], [103, 1, 5]]
}